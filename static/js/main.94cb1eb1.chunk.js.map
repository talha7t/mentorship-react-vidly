{"version":3,"sources":["services/logService.js","services/httpService.js","services/movieService.js","services/genreService.js","components/commons/ListGroups.jsx","services/authService.js","components/commons/Like.jsx","components/commons/TableHeader.jsx","components/commons/TableBody.jsx","components/commons/Table.jsx","components/MoviesTable.jsx","components/commons/Pagination.jsx","utils/paginate.js","components/commons/SearchBox.jsx","components/movies.jsx","components/commons/Logout.jsx","components/Customers.jsx","components/Rentals.jsx","components/NotFound.jsx","components/Navbar.jsx","components/commons/Input.jsx","components/commons/Select.jsx","components/commons/Form.jsx","components/MovieForm.jsx","components/LoginForm.jsx","services/userService.js","components/RegisterForm.jsx","components/commons/ProtectedRoutes.jsx","App.js","serviceWorker.js","index.js"],"names":["init","log","error","console","axios","defaults","baseURL","process","interceptors","response","use","status","logger","toast","Promise","reject","get","post","put","delete","setJWT","jwt","headers","common","movieUrl","id","getMovie","movieId","http","saveMovie","movie","_id","body","deleteMovie","getGenres","ListGroups","this","props","items","textProperty","valueProperty","selectedItem","onItemSelect","className","map","item","key","onClick","Component","defaultProps","email","password","a","data","localStorage","setItem","getJWT","getItem","login","loginWithJWT","logout","removeItem","getCurrentUser","jwtDecode","ex","Like","classes","liked","style","cursor","onLikeClick","TableHeader","raiseSort","path","sortColumn","order","onSort","renderSortIcon","column","columns","label","TableBody","renderCell","content","_","createKey","Table","MoviesTable","to","title","onLike","deleteColumn","onRowRemove","user","auth","isAdmin","push","movies","Pagination","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","range","page","paginate","pageNumber","startIndex","slice","take","value","SearchBox","onChange","type","name","placeholder","e","currentTarget","Movies","state","genres","searchQuery","selectedGenre","removeRow","originalMovies","filter","m","setState","handleLike","index","indexOf","handlePageChange","handleGenreSelect","genre","handleSearch","query","handleSort","getPageData","allMovies","filtered","toLowerCase","startsWith","orderBy","totalCount","length","margin","React","Logout","window","location","Customers","Rentals","NotFound","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Fragment","Input","rest","htmlFor","Select","options","option","Form","errors","validate","Joi","schema","abortEarly","details","message","validateProperty","obj","handleSubmit","preventDefault","doSubmit","handleChange","input","errorMessage","renderButton","disabled","renderInput","MovieForm","genreId","numberInStock","dailyRentalRate","string","required","number","min","max","history","match","params","mapToViewModel","replace","populateGenre","populateMovie","onSubmit","renderSelect","LoginForm","username","from","pathname","register","RegisterForm","userService","ProtectedRoutes","component","render","App","exact","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.94cb1eb1.chunk.js","sourcesContent":["function init() {}\r\n\r\nfunction log(error) {\r\n  console.error(error);\r\n}\r\n\r\nexport default {\r\n  init,\r\n  log,\r\n};\r\n","import axios from \"axios\";\r\nimport logger from \"./logService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status <= 500;\r\n\r\n  if (!expectedError) {\r\n    logger.log(error);\r\n    toast.error(\"An unexpected error occured\");\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\nfunction setJWT(jwt) {\r\naxios.defaults.headers.common[\"x-auth-token\"] = jwt;\r\n}\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n  setJWT,\r\n};\r\n","import http from \"./httpService\";\r\n\r\nconst apiEndPoint = \"/movies\";\r\n\r\nfunction movieUrl(id) {\r\n  return `${apiEndPoint}/${id}`;\r\n}\r\n\r\nexport function getMovies() {\r\n  return http.get(apiEndPoint);\r\n}\r\n\r\nexport function getMovie(movieId) {\r\n  return http.get(movieUrl(movieId));\r\n}\r\n\r\nexport function saveMovie(movie) {\r\n  if (movie._id) {\r\n    const body = { ...movie };\r\n    delete body._id;\r\n    return http.put(movieUrl(movie._id), body);\r\n  }\r\n\r\n  return http.post(apiEndPoint, movie);\r\n}\r\n\r\nexport function deleteMovie(movieId) {\r\n  return http.delete(movieUrl(movieId));\r\n}\r\n","import http from \"./httpService\";\r\n\r\nexport function getGenres() {\r\n  return http.get(\"/genres\");\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class ListGroups extends Component {\r\n  render() {\r\n    const {\r\n      items,\r\n      textProperty,\r\n      valueProperty,\r\n      selectedItem,\r\n      onItemSelect,\r\n    } = this.props;\r\n    //textProperty and valueProperty are passed so that we can work with properties other than items.name and items._id\r\n    // they are passed as default props below\r\n    return (\r\n      <div>\r\n        <ul className=\"list-group\">\r\n          {items.map((item) => (\r\n            <li\r\n              key={item[valueProperty]}\r\n              onClick={() => onItemSelect(item)}\r\n              className={\r\n                item === selectedItem\r\n                  ? \"list-group-item active\"\r\n                  : \"list-group-item\"\r\n              }\r\n            >\r\n              {item[textProperty]}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// setting the default values for follwing props\r\n// if in the future we are working with a different kind of object that doesn't have these props we can override them\r\nListGroups.defaultProps = {\r\n  textProperty: \"name\",\r\n  valueProperty: \"_id\",\r\n};\r\n\r\nexport default ListGroups;\r\n","import http from \"./httpService\";\r\nimport jwtDecode from 'jwt-decode'\r\n\r\nconst apiEndPoint = \"/auth\";\r\nconst tokenKey = 'token'\r\n\r\nhttp.setJWT(getJWT());\r\n\r\nexport async function login(email, password) {\r\n  const {data:jwt} = await http.post(apiEndPoint, { email, password });\r\n  localStorage.setItem(tokenKey, jwt); // storing the jwt token in browser's local storage\r\n}\r\n\r\nexport function loginWithJWT(jwt) {\r\n  localStorage.setItem(tokenKey, jwt)\r\n}\r\n\r\nexport function logout() {\r\n  localStorage.removeItem(tokenKey);\r\n}\r\n\r\nexport function getCurrentUser() {\r\n    try {\r\n      const jwt = localStorage.getItem(tokenKey);\r\n      return jwtDecode(jwt);\r\n    } catch (ex) {\r\n      return null;\r\n    }\r\n}\r\n\r\nexport function getJWT () {\r\n  return localStorage.getItem(tokenKey);\r\n}\r\n\r\nexport default {\r\n  login,\r\n  loginWithJWT, \r\n  logout,\r\n  getCurrentUser,\r\n  getJWT\r\n}","import React from \"react\";\r\n\r\nfunction Like(props) {\r\n  let classes = \"fa-heart fa\";\r\n  props.liked ? (classes += \"s\") : (classes += \"r\");\r\n\r\n  return (\r\n    <div>\r\n      <i\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={props.onLikeClick}\r\n        className={classes}\r\n      ></i>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Like;\r\n","import React, { Component } from \"react\";\r\n\r\n// Interface of this component =  columns(array), sortColumn(object), onSort(function)\r\n\r\nexport class TableHeader extends Component {\r\n  // raising the sort event\r\n  raiseSort = (path) => {\r\n    const sortColumn = { ...this.props.sortColumn };\r\n    //if path is same change the sort oredr if it is different set it to path passed and order to ascending\r\n    if (sortColumn.path === path) {\r\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n    } else {\r\n      sortColumn.path = path;\r\n      sortColumn.order = \"asc\";\r\n    }\r\n    // raising the sort event\r\n    this.props.onSort(sortColumn);\r\n  };\r\n\r\n  renderSortIcon = (column) => {\r\n    const { sortColumn } = this.props;\r\n    if (column.path !== sortColumn.path) return null;\r\n\r\n    if (sortColumn.order === \"asc\") return <i className=\"fa fa-sort-asc\"></i>;\r\n\r\n    return <i className=\"fa  fa-sort-desc\"></i>;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          {this.props.columns.map((column) => (\r\n            <th\r\n              key={column.path || column.key}\r\n              onClick={() => this.raiseSort(column.path)}\r\n              className=\"clickable\"\r\n            >\r\n              {column.label} {this.renderSortIcon(column)}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableHeader;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nexport class TableBody extends Component {\r\n  // if cell has content render it (like and button) else return cell for genres etc.\r\n  renderCell = (item, column) => {\r\n    if (column.content) return column.content(item);\r\n\r\n    return _.get(item, column.path);\r\n  };\r\n\r\n  createKey = (item, column) => {\r\n    return item._id + (column.path || column.key);\r\n  };\r\n\r\n  render() {\r\n    const { data, columns } = this.props;\r\n    return (\r\n      <tbody>\r\n        {data.map((item) => (\r\n          <tr key={item._id}>\r\n            {columns.map((column) => (\r\n              <td key={this.createKey(item, column)}>\r\n                {this.renderCell(item, column)}\r\n              </td>\r\n            ))}\r\n            {/* column.oath is nested inside of \"item\" which is difficult to get so we use lodash to get it  */}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableBody;\r\n","import React from \"react\";\r\nimport TableHeader from \"./TableHeader\";\r\nimport TableBody from \"./TableBody\";\r\n\r\nfunction Table({ columns, sortColumn, onSort, data }) {\r\n  return (\r\n    <table className=\"table\">\r\n      <TableHeader columns={columns} sortColumn={sortColumn} onSort={onSort} />\r\n\r\n      <TableBody data={data} columns={columns} />\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport auth from '../services/authService'\r\nimport Like from \"./commons/Like\";\r\nimport Table from \"./commons/Table\";\r\n\r\nexport default class MoviesTable extends Component {\r\n  columns = [\r\n    // this wont change through out the life cycle of the component\r\n    {\r\n      path: \"title\",\r\n      label: \"Title\",\r\n      content: (movie) => (\r\n        <Link to={`/movies/ ${movie._id}`}>{movie.title}</Link>\r\n      ),\r\n    },\r\n    { path: \"genre.name\", label: \"Genre\" },\r\n    { path: \"numberInStock\", label: \"Stock\" },\r\n    { path: \"dailyRentalRate\", label: \"Rate\" },\r\n    {\r\n      key: \"like\",\r\n      content: (movie) => (\r\n        <Like\r\n          liked={movie.liked}\r\n          onLikeClick={() => this.props.onLike(movie)}\r\n        />\r\n      ),\r\n    }, // key for like when rendered in list, components get converted into js objects so we can use them like this, content becoms a method\r\n  ];\r\n\r\n  deleteColumn = {\r\n      key: \"delete\",\r\n      content: (movie) => (\r\n        <button\r\n          onClick={() => this.props.onRowRemove(movie)}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          Delete\r\n        </button>\r\n      ),\r\n    } // key for delete button when rendered in list\r\n\r\n    constructor() {\r\n      super();\r\n      const user = auth.getCurrentUser();\r\n      if(user && user.isAdmin) {\r\n        this.columns.push(this.deleteColumn);\r\n      } \r\n    }\r\n  \r\n    render() {\r\n    const { movies, onSort, sortColumn } = this.props;\r\n    return (\r\n      <Table\r\n        columns={this.columns}\r\n        data={movies}\r\n        sortColumn={sortColumn}\r\n        onSort={onSort}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Pagination({ itemsCount, pageSize, currentPage, onPageChange }) {\r\n  // page Size = number of movies in one page, itemsCount = total number of moveis\r\n  const pagesCount = Math.ceil(itemsCount / pageSize); // round to smallest whole number, pagesCount is the number of pages in pagination\r\n\r\n  if (pagesCount === 1) return null; // so there is no pagination if there is a single page\r\n  const pages = _.range(1, pagesCount + 1); // end number is not included with lodash so we add 1\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pages.map((page) => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\r\n          >\r\n            <span className=\"page-link\" onClick={() => onPageChange(page)}>\r\n              {page}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// type checking of props\r\nPagination.propTypes = {\r\n  itemsCount: PropTypes.number.isRequired,\r\n  pageSize: PropTypes.number.isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  onPageChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Pagination;\r\n","import _ from \"lodash\";\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  // to paginate the data we find the starting index of the items on this page\r\n  const startIndex = (pageNumber - 1) * pageSize;\r\n\r\n  return _(items).slice(startIndex).take(pageSize).value();\r\n  // _()  returns a lodash object, we convert the items into a wrapper for chaining\r\n  //   _.slice(items, startIndex); //slice our array from the startIndex and return a new array\r\n  //   _.take() allows us to pick items we want, to do that we need to convert the array into a lodash wrapper\r\n  // .value converts lodash array into a regular array\r\n}\r\n","import React from \"react\";\r\n\r\nfunction SearchBox({ value, onChange }) {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name=\"query\"\r\n      placeholder=\"Search...\"\r\n      value={value}\r\n      onChange={(e) => onChange(e.currentTarget.value)}\r\n      className=\"form-control my-3\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { deleteMovie, getMovies } from \"../services/movieService\";\r\nimport { getGenres } from \"../services/genreService\";\r\nimport ListGroups from \"./commons/ListGroups\";\r\nimport MoviesTable from \"./MoviesTable\";\r\nimport Pagination from \"./commons/Pagination\";\r\nimport { paginate } from \"../utils/paginate\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SearchBox from \"./commons/SearchBox\";\r\n\r\nclass Movies extends React.Component {\r\n  state = {\r\n    movies: [],\r\n    genres: [],\r\n    pageSize: 4,\r\n    currentPage: 1,\r\n    searchQuery: \"\",\r\n    selectedGenre: null,\r\n    sortColumn: { path: \"title\", order: \"asc\" }, // determine how data is sorted in moviesTable\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { data } = await getGenres();\r\n    const genres = [{ _id: \"\", name: \"All Genres\" }, ...data]; // id set to empty string, because it is not a valid genre in the database\r\n\r\n    const { data: movies } = await getMovies();\r\n    this.setState({ movies, genres });\r\n  }\r\n\r\n  removeRow = async (movie) => {\r\n    const originalMovies = this.state.movies;\r\n\r\n    // change the UI\r\n    const movies = originalMovies.filter((m) => m._id !== movie._id);\r\n    this.setState({ movies: movies });\r\n\r\n    // if error occurs during deletion show the error and set movies to original movies\r\n    try {\r\n      await deleteMovie(movie._id);\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404) {\r\n        toast.error(\"this movie has already been deleted\");\r\n\r\n        this.setState({ movies: originalMovies });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleLike = (movie) => {\r\n    const movies = [...this.state.movies]; //cloning \"movies\" from state\r\n    const index = movies.indexOf(movie); // storing the index of target object from \"movies\"\r\n    movies[index] = { ...movies[index] }; //cloning the target object from 'movies\r\n    movies[index].liked = !movies[index].liked; //toggling liked\r\n    this.setState({ movies: movies });\r\n  };\r\n\r\n  handlePageChange = (page) => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  handleGenreSelect = (genre) => {\r\n    this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 });\r\n    // current page is set to 1 so that we go to the first page of the selected genre\r\n  };\r\n\r\n  handleSearch = (query) => {\r\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\r\n  };\r\n    \r\n  // handle sorting of data in movies table\r\n  handleSort = (sortColumn) => {\r\n    this.setState({ sortColumn });\r\n  };\r\n\r\n\r\n  getPageData = () => {\r\n    //filter, sort and paginate data\r\n    const {\r\n      pageSize,\r\n      currentPage,\r\n      sortColumn,\r\n      searchQuery,\r\n      selectedGenre,\r\n      movies: allMovies,\r\n    } = this.state;\r\n\r\n    //filtering according to genre is done before paginationn cause we want number of pages to be according to number of movies\r\n    // the confition allows filtering only when genre has an id, no id in 'All Genres' so no filtering\r\n    let filtered = allMovies;\r\n\r\n    if (searchQuery) {\r\n      filtered = allMovies.filter((m) =>\r\n        m.title.toLowerCase().startsWith(searchQuery.toLowerCase())\r\n      );\r\n    } else if (selectedGenre && selectedGenre._id) {\r\n      filtered = allMovies.filter((m) => m.genre._id === selectedGenre._id);\r\n    }\r\n\r\n    //sorting should be done after filtering the data\r\n\r\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\r\n    //the first argument is input, second argument is an array of property names (we can sort with multiple columns or multiple property names,\r\n    // here we only have sort by one column) so we pass \"sortColumn.path\" in the array, the third argument is the sort order (ascending or des in our case)\r\n\r\n    // paginating should be done after sorting and filtering the data\r\n    const movies = paginate(sorted, currentPage, pageSize);\r\n\r\n    return { totalCount: filtered.length, data: movies };\r\n  };\r\n\r\n  //render\r\n  render() {\r\n    // const { length: count } = this.state.movies;\r\n    const {user} = this.props; \r\n    const { pageSize, currentPage, sortColumn } = this.state;\r\n   \r\n  \r\n    const { totalCount, data: movies } = this.getPageData();\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-3\">\r\n          {\" \"}\r\n          <ListGroups\r\n            items={this.state.genres}\r\n            selectedItem={this.state.selectedGenre}\r\n            onItemSelect={this.handleGenreSelect}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col\">\r\n          { user && (<Link\r\n            to=\"/movies/new\"\r\n            className=\"btn btn-primary\"\r\n            style={{ margin: \"20px\" }}\r\n          >\r\n            New Movie\r\n          </Link>)}\r\n\r\n          <p>Showing {totalCount} movies in Database</p>\r\n\r\n          <SearchBox\r\n            value={this.state.searchQuery}\r\n            onChange={this.handleSearch}\r\n          />\r\n          <MoviesTable\r\n            movies={movies}\r\n            sortColumn={sortColumn}\r\n            onLike={this.handleLike}\r\n            onRowRemove={this.removeRow}\r\n            onSort={this.handleSort}\r\n          />\r\n          {/* Pagination */}\r\n          <Pagination\r\n            itemsCount={totalCount}\r\n            pageSize={pageSize}\r\n            currentPage={currentPage}\r\n            onPageChange={this.handlePageChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movies;\r\n","import { Component } from 'react'\r\nimport auth from '../../services/authService'\r\n\r\nexport default class Logout extends Component {\r\n    componentDidMount(){\r\n        auth.logout(); \r\n        window.location = '/';\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Customers() {\r\n  return <h1>Customers</h1>;\r\n}\r\n\r\nexport default Customers;\r\n","import React from \"react\";\r\n\r\nfunction Rentals() {\r\n  return <h1>Rentals</h1>;\r\n}\r\n\r\nexport default Rentals;\r\n","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return <h1>Not Found</h1>;\r\n}\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\n\r\nfunction Navbar({user}) {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <Link to=\"/\" className=\"navbar-brand\">\r\n          Vidly\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNavAltMarkup\"\r\n          aria-controls=\"navbarNavAltMarkup\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle Navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n          <div className=\"navbar-nav\">\r\n            <NavLink to=\"/movies\" className=\"nav-item nav-link\">\r\n              Movies\r\n            </NavLink>\r\n            <NavLink to=\"/customers\" className=\"nav-item nav-link\">\r\n              Customers\r\n            </NavLink>\r\n            <NavLink to=\"/rentals\" className=\"nav-item nav-link\">\r\n              Rentals\r\n            </NavLink>\r\n            { !user && <React.Fragment>\r\n             <NavLink to=\"/login\" className=\"nav-item nav-link\">\r\n              Login\r\n            </NavLink>\r\n            <NavLink to=\"/register\" className=\"nav-item nav-link\">\r\n              Register\r\n            </NavLink>\r\n            </React.Fragment>\r\n            }\r\n\r\n            { user && <React.Fragment>\r\n             <NavLink to=\"/profile\" className=\"nav-item nav-link\">\r\n              {user.name}\r\n            </NavLink>\r\n            <NavLink to=\"/logout\" className=\"nav-item nav-link\">\r\n              Logout\r\n            </NavLink>\r\n            </React.Fragment>\r\n            }\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Input({ name, label, ...rest }) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input {...rest} name={name} id={name} className=\"form-control\" />\r\n      {/* spreading the rest */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nconst Select = ({ name, label, options, ...rest }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <select name={name} id={name} {...rest} className=\"form-control\">\r\n        <option value=\"\" />\r\n        {options.map((option) => (\r\n          <option key={option._id} value={option._id}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { Component } from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport Input from \"./Input\";\r\nimport Select from \"./Select\";\r\n\r\nexport default class Form extends Component {\r\n  state = {\r\n    data: {},\r\n    errors: {},\r\n  };\r\n\r\n  validate = () => {\r\n    const options = { abortEarly: false };\r\n    const { error } = Joi.validate(this.state.data, this.schema, options); // first argument is an object which is to be validated, second argument is the schema we want to use for validation, the third argument removes the default behaviour of joi that terminated validation as soon as first error occurs\r\n    // console.log(error);\r\n\r\n    if (!error) return null; // if result.error is falsy return null\r\n\r\n    const errors = {};\r\n    // map 'details' array  from 'Joi' to an object\r\n    for (let item of error.details) errors[item.path[0]] = item.message; // setting property of error object, item.path is an array, it's forst element is our target property\r\n\r\n    return errors;\r\n  };\r\n\r\n  validateProperty = ({ name, value }) => {\r\n    // validate each input as we type\r\n    // destructures the name and value properties of input\r\n    const obj = { [name]: value }; // dynammic key syntax of es6\r\n\r\n    const schema = { [name]: this.schema[name] };\r\n    const { error } = Joi.validate(obj, schema);\r\n\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const errors = this.validate();\r\n    this.setState({ errors: errors || {} }); // if error does not exist after change in input field set errors to null\r\n    if (errors) return;\r\n\r\n    this.doSubmit(); // in 'LoginForm'\r\n  };\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    //renamed currentTarget from 'e' to input\r\n\r\n    //validation of input field on change\r\n    const errors = { ...this.state.errors };\r\n    const errorMessage = this.validateProperty(input);\r\n    if (errorMessage) errors[input.name] = errorMessage;\r\n    else delete errors[input.name];\r\n\r\n    const data = { ...this.state.data };\r\n    data[input.name] = input.value;\r\n    this.setState({ data, errors });\r\n  };\r\n\r\n  renderButton = (label) => {\r\n    return (\r\n      <button disabled={this.validate()} className=\"btn btn-primary\">\r\n        {label}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  renderInput = (name, label, type = \"text\") => {\r\n    const { data, errors } = this.state;\r\n    return (\r\n      <Input\r\n        type={type}\r\n        name={name}\r\n        value={data[name]}\r\n        label={label}\r\n        error={errors[name]}\r\n        onChange={this.handleChange}\r\n      />\r\n    );\r\n  };\r\n\r\n  renderSelect(name, label, options) {\r\n    const { data, errors } = this.state;\r\n\r\n    return (\r\n      <Select\r\n        name={name}\r\n        value={data[name]}\r\n        label={label}\r\n        options={options}\r\n        onChange={this.handleChange}\r\n        error={errors[name]}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Form from \"./commons/Form\";\r\nimport Joi from \"joi-browser\";\r\nimport { getGenres } from \"../services/genreService\";\r\nimport { getMovie, saveMovie } from \"../services/movieService\";\r\n\r\nclass MovieForm extends Form {\r\n  state = {\r\n    data: {\r\n      title: \"\",\r\n      genreId: \"\",\r\n      numberInStock: \"\",\r\n      dailyRentalRate: \"\",\r\n    },\r\n    genres: [],\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    //wont be changed throughout lifecycle so not defined in the state\r\n    // is completely dependent on each form so is not reusable\r\n    _id: Joi.string(), // not required since we dont have an id when creating a movie\r\n    title: Joi.string().required().label(\"Title\"),\r\n    genreId: Joi.string().required().label(\"Genre\"),\r\n    numberInStock: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(100)\r\n      .label(\"Number in Stock\"),\r\n    dailyRentalRate: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(10)\r\n      .label(\"Daily Rental Rate\"),\r\n  };\r\n\r\n  async populateGenre() {\r\n    const { data: genres } = await getGenres();\r\n    this.setState({ genres });\r\n  }\r\n\r\n  async populateMovie() {\r\n    try {\r\n      const movieId = this.props.match.params.id;\r\n      if (movieId === \"new\") return; // from url movies/:id\r\n\r\n      const { data: movie } = await getMovie(movieId);\r\n      this.setState({ data: this.mapToViewModel(movie) }); //returning object that sets movie information into state\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404)\r\n        this.props.history.replace(\"./not-found\"); // if wrong movie id is entered in url redirect to not-found\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.populateGenre();\r\n\r\n    await this.populateMovie();\r\n  }\r\n\r\n  mapToViewModel(movie) {\r\n    return {\r\n      _id: movie._id,\r\n      title: movie.title,\r\n      genreId: movie.genre._id,\r\n      numberInStock: movie.numberInStock,\r\n      dailyRentalRate: movie.dailyRentalRate,\r\n    };\r\n  };\r\n\r\n  doSubmit = async () => {\r\n    //call the server down here\r\n    await saveMovie(this.state.data);\r\n\r\n    this.props.history.push(\"/movies\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Movie</h1>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.renderInput(\"title\", \"Title\")}\r\n          {this.renderSelect(\"genreId\", \"Genre\", this.state.genres)}\r\n          {this.renderInput(\"numberInStock\", \"Numbers in Stock\", \"number\")}\r\n          {this.renderInput(\"dailyRentalRate\", \"Rate\")}\r\n\r\n          {this.renderButton(\"Save\")}\r\n          {/* renderButton is from parent class 'Form' */}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieForm;\r\n","import React from \"react\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport Joi from \"joi-browser\";\r\nimport Form from \"./commons/Form\";\r\nimport auth from \"../services/authService\";\r\n\r\nexport default class LoginForm extends Form {\r\n  state = {\r\n    data: {\r\n      username: \"\",\r\n      password: \"\",\r\n    },\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    //wont be changed throughout lifecycle so not defined in the state\r\n    // is completely dependent on each form so is not reusable\r\n    username: Joi.string().required().label(\"Username\"),\r\n    password: Joi.string().required().label(\"Password\"),\r\n  };\r\n\r\n  doSubmit = async () => {\r\n    //call the server down here\r\n    try {\r\n      const { data } = this.state;\r\n      await auth.login(data.username, data.password);\r\n      // console.log(jwt) \r\n\r\n      const {state} = this.props.location  //coming from ProtectedRoute component\r\n      window.location = state? state.from.pathname : '/';  // a full reload so the app is component is monted again whenever the user logs in \r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n        const errors = { ...this.state.errors };\r\n        errors.username = ex.response.data; // setting username to the error we get from the server\r\n        this.setState({ errors });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    if(auth.getCurrentUser()) return <Redirect to='/' />  // if user is logged in dont take them to login page\r\n\r\n    return (\r\n      <div>\r\n        <h1>Login</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.renderInput(\"username\", \"Username\")}\r\n          {/* name and label and type */}\r\n          {this.renderInput(\"password\", \"Password\", \"password\")}\r\n\r\n          {this.renderButton(\"Login\")}\r\n          {/* renderButton is from parent class 'Form' */}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import http from \"./httpService\";\r\n\r\nconst apiEndPoint = \"/users\";\r\n\r\nexport function register(user) {\r\n  return http.post(apiEndPoint, {\r\n    email: user.username,\r\n    password: user.password,\r\n    name: user.name,\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport Form from \"./commons/Form\";\r\nimport * as userService from \"../services/userService\";\r\nimport auth from '../services/authService'\r\n\r\nexport default class RegisterForm extends Form {\r\n  state = {\r\n    data: {\r\n      username: \"\",\r\n      password: \"\",\r\n      name: \"\",\r\n    },\r\n    errors: {},\r\n  };\r\n\r\n  schema = {\r\n    username: Joi.string().required().email().label(\"Username\"),\r\n    password: Joi.string().required().min(5).label(\"Password\"),\r\n    name: Joi.string().required().label(\"Name\"),\r\n  };\r\n\r\n  doSubmit = async () => {\r\n    //call the server down here\r\n    try {\r\n      const response = await userService.register(this.state.data); //register user\r\n      console.log(response);\r\n\r\n      auth.loginWithJWT(response.headers[\"x-auth-token\"]);\r\n      \r\n      window.location = '/';  // a full reload so the app component is mounted again whenever the user registers in \r\n    } catch (ex) {\r\n      // show error if user already exists\r\n      if (ex.response && ex.response.status === 400) {\r\n        const errors = { ...this.state.errors };\r\n        errors.username = ex.response.data;\r\n\r\n        this.setState({ errors });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Register</h1>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.renderInput(\"username\", \"Username\", \"email\")}\r\n          {this.renderInput(\"password\", \"Password\", \"password\")}\r\n          {this.renderInput(\"name\", \"Name\")}\r\n          {this.renderButton(\"Register\")}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport auth from '../../services/authService'\r\n\r\nconst ProtectedRoutes = ({ component: Component, render, ...rest}) => {\r\n    return (\r\n        // path will be provide thorigh rest operator (the rest operator contains all props except component and render)\r\n       <Route {...rest} render={props=> {\r\n           console.log(props)\r\n              if(!auth.getCurrentUser()) return <Redirect to={{pathname: '/login', state: {from : props.location} }} />\r\n              return Component ? <Component {...props} /> : render(props);\r\n        }} />\r\n    )\r\n}\r\n\r\nexport default ProtectedRoutes\r\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport Movies from \"./components/movies\";\nimport Logout from './components/commons/Logout';\nimport Customers from \"./components/Customers\";\nimport Rentals from \"./components/Rentals\";\nimport NotFound from \"./components/NotFound\";\nimport Navbar from \"./components/Navbar\";\nimport MovieForm from \"./components/MovieForm\";\nimport LoginForm from \"./components/LoginForm\";\nimport RegisterForm from \"./components/RegisterForm\";\nimport ProtectedRoutes from './components/commons/ProtectedRoutes';\nimport auth from './services/authService'\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  state = {};\n\ncomponentDidMount() {\n    const user = auth.getCurrentUser();\n    this.setState({user})\n\n}\n\n  render() {\n    const user = this.state;\n    return (\n      <React.Fragment>\n        <ToastContainer />\n\n        <Navbar user={this.state.user} />\n        <main className=\"container\">\n          <Switch>\n            <Route path=\"/register\" component={RegisterForm} />\n            <Route path=\"/login\" component={LoginForm} />\n            <Route path=\"/logout\" component={Logout} />\n            <ProtectedRoutes path=\"/movies/:id\" component={MovieForm} />\n            <Route path=\"/movies\" render={props=> <Movies {...props} user={user}/>} />\n            <Route path=\"/customers\" component={Customers} />\n            <Route path=\"/rentals\" component={Rentals} />\n            <Route path=\"/not-found\" component={NotFound} />\n            <Redirect from=\"/\" exact to=\"/movies\" />\n            <Redirect to=\"not-found\" />\n          </Switch>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nconsole.log(process.env)\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}